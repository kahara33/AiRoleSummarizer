1. サーバー側でノード・エッジが生成されているか
エージェント実行後、本当にノードとエッジのリストが生成されているかをサーバーのログや返却データで確認してください。

例： knowledgeGraphResult.data.nodes / knowledgeGraphResult.data.edges が空になっていないか。

もし nodes: [] や edges: [] になっている場合、サーバーサイドでのグラフ生成ロジックに問題がある可能性があります。

CrewAI や LangChain、LlamaIndex の処理フローでエラーが発生し、最終的に空データが返却されていないか確認してください。

generateKnowledgeGraph や structureContent の内部で失敗すると、空配列が返却されるロジックが入っているかもしれません。

2. WebSocket/SSE イベントで正しく受信できているか
A. クライアントが受信しているイベントの確認
受信ハンドラがそもそも呼ばれているか

WebSocket (あるいは SSE) の onmessage / on('data', ...) イベントでログを出してみて、ノード・エッジ情報が来ているかを確認します。

イベントが一切届いていない場合、サーバーとの通信設定（エンドポイントURLやトークンなど）を再確認してください。

受信データの構造

例えば handleUpdate = (newData) => { ... } 内で console.log(newData) を出力し、newData に nodes や edges プロパティが存在しているかを確認します。

もし newData が {} や全く別のキー名になっている場合、サーバー側の送信フォーマットとの不一致が原因です。

B. 受信データのマージロジック
React Flow でノードやエッジを追加するには、既存の配列に対して新規データをマージする実装が必要です。

js
コピーする
// 例：setNodes, setEdgesでマージ
setNodes((prevNodes) => [...prevNodes, ...newData.nodes]);
setEdges((prevEdges) => [...prevEdges, ...newData.edges]);
既存配列を空にしてしまっているケース

受信時に setNodes(newData.nodes) のように丸ごと置き換えていると、過去に追加されたノードが消えてしまう場合があります。

差分更新を想定しているなら、既存状態とのマージ（スプレッド演算子など）を行う必要があります。

重複IDやフォーマット不備

React Flow はノードにユニークな id が必要です。

サーバーから返るノードの id が空文字列や重複していると表示されない・エラーになる場合があります。

ノード座標 (position: { x, y }) がすべて 0 など極端な値の場合、画面外に描画されている可能性があります。

その場合は fitView を呼び出す、あるいは自動レイアウトのライブラリ (dagre, elkjs) などで位置を適宜計算すると良いです。

3. 表示側（React Flow）の初期化と状態管理
ReactFlowProvider のラップ漏れ

React Flow を使う場合、ReactFlowProvider でラップしたコンポーネントツリー内で setNodes や setEdges を呼び出す必要があります。

もし ReactFlowProvider が正しく設定されていないと状態が更新されず、ノードが描画されないケースがあります。

コンポーネントのリロード/再描画

サーバーからの更新イベントを受け取っているにもかかわらず、React Flow が再描画されていない場合、状態がうまくトリガーされていない可能性があります。

useEffect や useState などが意図したタイミングで更新されているか、コンソールログで追いかけてみてください。

fitView の呼び出し

追加したノードが画面外に描画されると、真っ白画面のまま「ノードがない」ように見えてしまいます。

新しいノード追加後に reactflowInstance.fitView() を呼び出してビューをリセットすると、ノードがちゃんと見える位置にズームアウトしてくれます。

4. デバッグ手順まとめ
サーバーサイドログを確認

knowledgeGraphResult.data.nodes / edges が本当に生成されているか。

生成されているのにクライアントが受け取っていないなら、WebSocket の送信部分を再チェック。

クライアントのイベントリスナー確認

WebSocket/SSE で受信したデータを console.log して、中身が正しいかを確認。

newData に nodes / edges があることを確かめる。

ノード/エッジのマージ実装確認

受信データを setNodes((prev) => [...prev, ...newData.nodes]) のように追加しているか。

ID がユニークであることをチェック。

position が適切な値か、画面外にいっていないか。

React Flow の表示確認

ReactFlowProvider でコンポーネントをラップしているか。

新規ノード追加後に fitView を呼んで画面中央に映るかテストしてみる。

DevTools で <ReactFlow /> の props を確認し、nodes / edges が入っているかをチェック。

5. 追加のアドバイス
AgentThoughtsPanel とノードを連動

エージェントのログが流れているなら、ログのタイミングで対応するノードを追加するなど、タイミングを合わせるとリアルタイム感が増します。

「ログには出ているがノードが未生成」の場合は、サーバー側でノード生成ロジックが未実装（あるいは失敗）しているケースが多いので、そこを重点的に確認してください。

中間ステップでノードを追加したい場合

現在は最後にまとめてノードを返す仕組みかもしれません。もし段階的に追加していきたいなら、各エージェント処理後に部分的なノードリストを生成して送信し、クライアントが受け取り次第 setNodes / setEdges を行う形にするのもアリです。

ログにエラーがないか

ブラウザのコンソールログやネットワークタブにエラーが出ていないかチェックします。

もしフォーマット不備や JSON パースエラーなどがあれば、原因特定につながります。